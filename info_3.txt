@3.0
- TMDB (API site)
Login and get API key
https://developers.themoviedb.org/3/getting-started/introdution
https://developers.themoviedb.org/3/movies/get-movie-details

@3.1
- Structure
-- List Component
React component
https://reactnative.dev/docs/scrollview

@3.2
-Movies Screen Part One

--Swiper
--- install
: install web Swiper
---import
:import Swiper from "react-native-web-swiper";
--- put component
:const Container = styled.ScrollView`
  background-color: ${(props) => props.theme.mainBgColor};
`;
: <Container>
    <Swiper containerStyle={{ width: "100%", height: 300 }}>
      <View style={{ backgroundColor: "red" }}></View>
      <View style={{ backgroundColor: "blue" }}></View>
    </Swiper>
  </Container>

-- know the size of the screen
:const { height } = Dimensions.get("window");


@3.3
-Movies Screen Part Two

-- Loader
: <ActivityIndicator />

-- configure default background color at TAB (higher Level)
 : <Tab.Navigator
      sceneContainerStyle={{
        backgroundColor: isDark ? BLACK_COLOR : "white",
      }}

-- fetch now Plaaying and json items
:   const getNowPlaying = async () => {
    const { results } = await (
      await fetch(
        `https://api.themoviedb.org/3/movie/now_playing?api_key=${API_KEY}&language=en-US&page=1&region=KR`
      )
    ).json();
    setNowPlaying(results);
    setLoading(false);
  };

-- make utils and configure basic url path
: export const makeImgPath = (img: string, width: string = "w500") =>
  `https://image.tmdb.org/t/p/${width}${img}`;


-- return map
:        {nowPlaying.map((movie) => {
          return (
            <View key={movie.id}>
              <BgImg source={{ uri: makeImgPath(movie.backdrop_path) }} />
            </View>
          );
        })}

-- blur
--- install expo blur
: npm install expo-blur

---whatever you want to blur has to be *outside of blur view
If you want to blur image?
<View key={movie.id}>
  <BgImg source={{ uri: makeImgPath(movie.backdrop_path) }} />
  <BlurView
    intensity={300}
    style={{ width: "100%", height: "100%", position: "absolute" }}
  >
    <Title>{movie.original_title}</Title>
  </BlurView>
</View>

@3.4
-Movies Screen Part Three

--install swiper (more features)
:npm i --save react-native-swiper@next

--extend styled component
const Votes = styled(Overview)``

--wrapper and column
--- key features of wrapper :  justify-content , align-items

@3.5
-Refactor
-- using interface to bring props

interface SlideProps {
  backdrop_path: string;
  poster_path: string;
  original_title: string;
  overview: string;
  vote_average: number;
}

const Slide: React.FC<SlideProps> = ({
  backdrop_path,
  poster_path,
  original_title,
  overview,
  vote_average,
}) => {


-- promise all 
await Promise.all([getNowPlaying(), getUpcoming(), getTrending()]);

@3.6
-Trending Movies

-- ScrollView

#3.7
- comming soon

-- using ``
`${movie.overview.slice(0, 120)}...`

-- using specific date
(android/app/build.gradle 에서
def jscFlavor = 'org.webkit:android-jsc:+')

{new Date(movie.release_date).toLocaleDateString("ko")}
{new Date(movie.release_date).toLocaleDateString("ko", {
            month: "long", day : "numeric" , year: "numeric"
          })}

#3.8
-- refreshing
refreshControl attribute in scroll view
:
    <ScrollView
      refreshControl={
        <RefreshControl onRefresh={onRefresh} refreshing={refreshing} />
      }
      bounces={true}
    >




#3.9
- ScrollView vs FlatList

--ScrollView is bad at performance
renders all children at once

--flatList renders the items lazily.
lazy performance does not render everyhing at once



