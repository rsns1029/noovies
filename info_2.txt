@1.0
- project start
-- first time
: npx create-react-native-app
: npm run android

-- from second time
npm start
: npm run android
or
: npx create-react-native-app


@2.1
-app loading
-- download
: expo install expo-app-loading

-- <AppLoading /> props
startAsync -> calls first then calls onFinish
onFinish -> calls when done loading

@2.2
- Using Icons (Fontassome , Ionicons)
https://icons.expo.fyi/
-- download font
: expo install expo-font

- preload images
-- download aaset
expo install expo-asset

@2.3
- Font, Image prefetch
code : loading Assets
    Font.loadAsync(font)
    Image.prefetch(url)
    Asset.loadAsync(require("path"))
    await Promise.all([...fonts, ...images]);
code : simpler loading assets
     const [assets2] = useAssets([require("./splash2.png")]);
     const [loaded] = Font.useFonts(Ionicons.font);
     if (!assets2 || !loaded) return <AppLoading/>

@2.4
- Navigation ***
https://reactnavigation.org/
: npm install @react-navigation/native
: npm install react-native-screens react-native-safe-area-context
: npx pod-install ios (for ios)

@2.5
- tab navigation
-- installing bottom navigation
: npm install @react-navigation/bottom-tabs

-- rule
To render navigator, you have render navigation container first (just a rule)

@2.6
- Tab Navigator props
-- initalRouteName : first tab setting

-- screenOptions : setting for all tabs
   options : setting for only one tab
        tabBarBadge , tabBarLabelPosition, tabBarlabelStyle, tabBarActiveTintColor ,tabBarInActiveTintColor 

-- tabBarStyle : style for the bottom tab

-- headerTitleStyle : style for the header

@2.7
- exporting colors
-- code : simple exporting
       export const color = "white";

- Dark or Light mode
-- code : const isDark = useColorScheme() === "dark";

@2.8
- Mode theme
-- <NavigationContainer theme={isDark ? DarkTheme : DefaultTheme}>

- Icons
-- tabBarIcons : 
     tabBarIcon: ({ focused, color, size }) => {
            return <Ionicons name="film" size={size} color={color} />;
          }, --> just put what Navigator gives for simpler work

@2.9
- *** combine Stack Navigator with Tab Navigator ***
stack navigator - very customizable but little bit slow (implemented in JS)
native-stack-navigator - implemented in native but little less customizable
-- install native-stack
: npm install @react-navigation/native-stack

@2.10
- create stack-navigator
-- import code : import { createNativeStackNavigator } from "@react-navigation/native-stack";
-- Navigate code

const ScreenTwo = ({ navigation: { navigate } }) => (
  <TouchableOpacity onPress={() => navigate("Three")}>
    <Text>Two</Text>
  </TouchableOpacity>
);

const ScreenThree = ({ navigation: { goBack } }) => (
  <TouchableOpacity onPress={() => goBack()}>
    <Text>Three</Text>
  </TouchableOpacity>
);

@2.11
-configuring Stack Navigator
-- screenOptions for all screen and option for only one screen
 ex. animation , presentation , etc...


@2.12
-******** stacks and navigator (combine)
Method 1
-- render Tabs first
-- make screen inside tab navigation and render stack
code :
    <NavigationContainer>      
      <Tabs />
    </NavigationContainer>

      <Tab.Screen
        name="Movies"
        component={Stack}
        options={{
          tabBarIcon: ({ focused, color, size }) => {
            return <Ionicons name="film-outline" size={size} color={color} />;
          },
        }}
      />

-- it rembers the state of stack even after changing tab

Method2
-- render Stack and Tab together
  <Nav.Navigator screenOptions={{ headerShown: false }}>
    <Nav.Screen name="Tabs" component={Tabs}></Nav.Screen>
    <Nav.Screen name="Stack" component={Stack}></Nav.Screen>
  </Nav.Navigator>

-- pass navigate params and then """jump""" over Stack

const Movies = ({ navigation: { navigate } }) => (
  <TouchableOpacity
    style={{ flex: 1, justifyContent: "center", alignItems: "center" }}
    onPress={() => navigate("Stack", "One")}
  >
    <Text>Movies</Text>
  </TouchableOpacity>
);


-- code*** : navigate("Stack", { screen: "One" })}

@2.13
- Recap

@2.14
- styled component
-- download styled component from expo
: npm i styled-components

-- import from native (we can just use it like css)
code : 
import styled from "styled-components/native";
const Btn = styled.View`
  flex: 1;
  justify-content: center;
  align-items: center;  
`;

-- send props to styled component
<Title selected={false}>Movies</Title>
const Title = styled.Text`
  color: ${(props) => (props.selected ? "blue" : "red")};
`;

@2.15
-Themes
-- Theme is just java script object
EX : styled.js

-- Wrap ThemeProvider around app 
<ThemeProvider theme={isDark ? darkTheme : lightTheme}>
</ThemeProvider>

-- use props for the css
const Btn = styled.TouchableOpacity`
  background-color: ${(props) => props.theme.mainBgColor};
`;

@2.16
-Typescript

--Adding typescript to an existing project
:npm install -D typescript @types/jest @types/react @types/react-native @types/react-test-renderer

-- create tsconfig.json
copy and paste from https://reactnative.dev/docs/typescript

-- index.js has to stay as js

-- for styled-component import error :
source site :(https://styled-components.com/docs/api#typescript)
:npm install --save-dev @types/styled-components @types/styled-components-react-native

-- for theme property error
create declaration file styled.d.ts file
copy past from the site above
put property name and type in the interface
:
declare module "styled-components" {
  export interface DefaultTheme {
    mainBgColor: string;
    textColor: string;
  }
}

-- for prop type error
write React.FC<props={}>
: const Movies: React.FC<NativeStackScreenProps<any, "Movies">> = ({






